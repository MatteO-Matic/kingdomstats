var defaultchecked = []; var stringConstructor = "test".constructor; var arrayConstructor = [].constructor; var objectConstructor = {}.constructor; var column_level_index = 0; $.fn.dataTable.ext.search.push( function( settings, data, dataIndex ) { var min = parseInt( $('#min').val(), 10 ); var max = parseInt( $('#max').val(), 10 ); var lvl = parseFloat( data[column_level_index] ) || 0; /* use data for the lvl column*/ if ( ( isNaN( min ) && isNaN( max ) ) || ( isNaN( min ) && lvl <= max ) || ( min <= lvl && isNaN( max ) ) || ( min <= lvl && lvl <= max ) ) { return true; } return false; } ); function jsonpopadjutants(jsondata) { tablecolumns={}; tablecolumns[0] = jsondata.data[0]; ajaxdata=jsondata.data; column_level_index=29; /* Table default checked */ defaultchecked=[ "checkbox_nFight", "checkbox_nQibing", "checkbox_nQishe", "checkbox_nGongnu", "checkbox_nBubing", "checkbox_nStrategy", "checkbox_fHealth", "checkbox_SoldierName" ]; spawntable(); } function populatetableadjutants(){ $.getJSON("/data/0075/adjutants.json", jsonpopadjutants); } function jsonpopranged(jsondata) { tablecolumns={}; tablecolumns[0] = jsondata.data[0]; ajaxdata=jsondata.data; column_level_index=29; /* Table default checked */ defaultchecked=[ "checkbox_ItemName", "checkbox_FetchingTime", "checkbox_Level", "checkbox_LongRangeDamage", "checkbox_LoadAmmoTime", "checkbox_ShootDamageFactor"]; spawntable(); } function populatetableranged(){ $.getJSON("/data/0075/rangedweapon.json", jsonpopranged); } function jsonpopmelee(jsondata) { tablecolumns={}; tablecolumns[0] = jsondata.data[0]; ajaxdata=jsondata.data; column_level_index=48; /* Table default checked */ defaultchecked=[ "checkbox_ItemName", "checkbox_Level", "checkbox_Attackspeed", "checkbox_DpsCut", "checkbox_DpsPuncture"]; spawntable(); } function populatetablemelee(){ $.getJSON("/data/0075/meleeweapon.json", jsonpopmelee); } function jsonpoparmor(jsondata) { tablecolumns={}; tablecolumns[0] = jsondata.data[0]; ajaxdata=jsondata.data; column_level_index=10; /* Table default checked */ defaultchecked=[ "checkbox_ItemName", "checkbox_MetalDefenseValue", "checkbox_Level", "checkbox_MetalFailPro"]; spawntable(); } function populatetablearmor(){ $.getJSON("/data/0075/armor.json", jsonpoparmor); } function populatetablesoldiers(){ $.getJSON("/data/0075/soldiers.json", jsonpopsoldiers); } function jsonpopsoldiers(jsondata) { tablecolumns={}; tablecolumns[0] = jsondata.data[0]; ajaxdata=jsondata.data; column_level_index=52; /* Table default checked */ defaultchecked=[ "checkbox_MaxSpeed", "checkbox_fHealth", "checkbox_SoldierName", "checkbox_Level", ]; spawntable(); } function populatetablearmytype(){ } function urlObject(options) { "use strict"; /*global window, document*/ var url_search_arr, option_key, i, urlObj, get_param, key, val, url_query, url_get_params={}, a=document.createElement('a'), default_options={ 'url': window.location.href, 'unescape': true, 'convert_num': true }; if (typeof options !== "object") { options=default_options; } else { for (option_key in default_options) { if (default_options.hasOwnProperty(option_key)) { if (options[option_key] === undefined) { options[option_key] = default_options[option_key]; } } } } a.href = options.url; url_query=a.search.substring(1); url_search_arr=url_query.split('&'); if (url_search_arr[0].length> 1) { for (i = 0; i < url_search_arr.length; i += 1) { get_param=url_search_arr[i].split("="); if (options.unescape) { key=decodeURI(get_param[0]); val=decodeURI(get_param[1]); } else { key=get_param[0]; val=get_param[1]; } if (options.convert_num) { if (val.match(/^\d+$/)) { val=parseInt(val, 10); } else if (val.match(/^\d+\.\d+$/)) { val=parseFloat(val); } } if (url_get_params[key] === undefined) { url_get_params[key] = val; } else if (typeof url_get_params[key] === "string") { url_get_params[key] = [url_get_params[key], val]; } else { url_get_params[key].push(val); } get_param=[]; } } urlObj={ protocol: a.protocol, hostname: a.hostname, host: a.host, port: a.port, hash: a.hash.substr(1), pathname: a.pathname, search: a.search, parameters: url_get_params }; return urlObj; } /*get link to copy for clipboard*/ function getDataTableUrl(){ var table=$('#hellotable').DataTable(); var rstr=window.location.origin + window.location.pathname +"?"; table.columns().every( function () { if (this.visible()) { rstr += "cf="+ $(this.header()).text()+"&"; } } ); if(document.getElementById("max").value != "") { rstr += "lmax="+ document.getElementById("max").value+"&"; } if(document.getElementById("min").value != "") { rstr += "lmin="+ document.getElementById("min").value+"&"; } return rstr; } function spawntable() { var url=window.location.href; var url_params=urlObject(url).parameters; var cols=[]; var exampleRecord=tablecolumns[0]; var keys=Object.keys(exampleRecord); /*for each key, add a column definition*/ keys.forEach(function(k) { cols.push({ title: k, data: k }); }); var table=$('#hellotable').DataTable({ "columns": cols, "paging": true, "scrollX": true, "iDisplayLength": 50, "aaData": ajaxdata, "columnDefs": [ /* { // "targets": [ 0 ,1 ], // "visible": true, // "searchable": true },*/ { "targets": ["_all"], "visible": false, } ] }); table.rows.add(tablecolumns).draw(); $('#hellotable').delegate('tbody> tr', 'click', function () { var data = table.row( this ).data(); window.open("/item/"+data.ItemId); }); /* $('#hellotable tbody').on('click', 'tr', function () { var data = table.row( this ).data(); alert( 'You clicked on '+data.ItemId+'\'s row' ); } ); */ if(url_params.lmax != null) { document.getElementById("max").value = url_params.lmax; } if(url_params.lmin != null) { document.getElementById("min").value = url_params.lmin; } if (url_params.cf != null) { if(url_params.cf.constructor == stringConstructor) { togglecheckbox("checkbox_" + url_params.cf); } else if(url_params.cf.constructor == arrayConstructor) { for (i = 0; i < url_params.cf.length; i++){ togglecheckbox("checkbox_" + url_params.cf[i]); } } else { console.debug("Unknown filter constructor"); } } else { /*check defaults*/ for (i = 0; i < defaultchecked.length; i++){ togglecheckbox( defaultchecked[i] ); } } $('input.toggle-vis').on( 'change', function (e) { e.preventDefault(); /* Get the column API object */ var column = table.column( $(this).attr('data-column') ); /* Toggle the visibility*/ column.visible(this.checked); } ); /* Event listener to the two range filtering inputs to redraw on input*/ $('#min, #max').keyup( function() { table.draw(); } ); function togglecheckbox(itemID){ element = document.getElementById(itemID); element.checked = !element.checked; var column = table.column( $(element).attr('data-column') ); column.visible(element.checked); } }